============================================
VoiceMemo Application using MarkLogic Server
============================================
:Author: Hari Krishna Dara
:Date: 15-Dec-2010


Objective
=========
Create a service that allows us to create memos by simply calling a phone number and dictating the memo. The service should transcribe the memo and store it with enough metadata to be useful to search and retrieve
using a web interface. The service should be built on top of MarkLogic Server using Twilio as the voice gateway.

Implementation
==============
There are two main parts to the system:

1. Note taker webservice that has two components

    * Voice-memo webservice, that receives actions and callbacks from Twilio
    * The Twilio voice gateway frontend that is in turn driven by ``TwiML`` generated by Voice-memo webservice

#. A MarkLogic application that allows us to browse, search and manage the stored memo's.

Note taker webservice
---------------------

The webservice provides several REST API calls for Twilio's server to use. When a user calls a pre-assigned phone number, the call is answered by Twilio and with the help of ``TwiML`` generated by callbacks to our webservice,
the user is guided through the recording process. Twilio calls our webservice first when the recording is available, and later when the transcription is ready. The webservice uses MarkLogic server to create and update memo
as Twilio makes that information available to the service. Here is a visualization of the entire process:

.. image:: http://img189.imageshack.us/img189/2971/scheme.png


1. User initiates call
~~~~~~~~~~~~~~~~~~~~~~

User first calls a predetermined phone number. The call is answered by Twilio and triggers the rest of the process.

2. Twilio sends SID to Note Taker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After the process is initiated, one of the first things Twilio does is to send a request to the "Voice URL", which is set to a predetermined URL of the Note Taker. The URL looks like this: ``http://host:port/voicememo/startmemo``.

3. Instruct user to start recording
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The response back to Twilio is a ``TwiML`` document that guides the user through recording process. Here is how the XML looks like::

    <Response>
        <Say>Hello. Please start recording your memo after the beep. Press # key when done.</Say>
        <Record transcribe="true" transcribeCallback="transcribedmemo"
            action="voicememo" maxLength="30" finishOnKey="#"/>
    </Response>

4. Instruct user to speak
~~~~~~~~~~~~~~~~~~~~~~~~~

Twilio plays the message that is part of the ``Say`` element. When user presses the "#" key or exceeds the 30 second length, the recording ends.

5. Recording ends
~~~~~~~~~~~~~~~~~

When recording ends, Twilio sends a request to the ``http://host:port/voicememo/recordedmemo`` URL that includes the ``RecordingUrl`` and ``RecordingDuration`` parameters. The RecordingUrl can be used to download recorded audio.

6. Create memo
~~~~~~~~~~~~~~

At this point, the Note Taker webservice has the following information to add a new memo:

* Recoding of the memo
* Duration of the recording
* Timestamp (approximate)

The voice recording is retrieved from the ``RecordingUrl`` and included into the document as ``Base64`` encoded text. While inserting the memo as a new XML document in MarkLogic, the following information is used:

* The URI of the document is set to: ``/voicememo/<CallSid>.html``
* The Category of the document is set to: ``/voicememo/<From>``

7. Say, Good bye! to user
~~~~~~~~~~~~~~~~~~~~~~~~~

After the new memo has been inserted into the system, a ``TwiML`` document is returned that terminates the call gracefully. Here is how the XML looks like::

    <Response>
        <Say>Your memo has been recorded.</Say>
        <Say>Goodbye.</Say>
    </Response>

8. Call ends
~~~~~~~~~~~~

Twilio plays the message that the memo has been recorded and disconnects the call after saying goodbye.

9. Transcription is available
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When Twilio completes the transcription of the voice message, an asynchronous request is made to the URL http://host:port/voicememo/transcribedmemo with the parameters ``TranscriptionStatus`` and ``TranscriptionText``.

10. Update Memo with transcription information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If ``TranscriptionStatus`` is ``"Completed"``, the ``TranscriptionText`` is then added to the memo that is already created. The unique ``CallSid`` is used to identify the correct XML document that needs to be updated. The ``TranscriptionStatus`` is added to the document anyway, with an empty ``TranscriptionText`` as it is useful to know why a transcription is missing, if at all a message fails to transcribe.

MarkLogic Application
---------------------

Here are some useful queries to lookup information in the voice memo database and help build an application:

Given a memo URI, retrieve its voice recording
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
::

    fn:doc(fn:doc("/voicememo/<CallSid>.xml")//recordedVoiceDocURI/text())/node()

Retrieving the transcribed memos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let us first work on a function that can output HTML formatted memo's::

    declare function local:get_memos($xpathexpr as item()*) as item()
    {
        <html xmlns="http://www.w3.org/1999/xhtml"> 
        <head><title>List of Memos</title></head> 
        <body>
        <table>
        <tr><th>Recorded At</th><th>Memo</th></tr>
        {
        for $memo in $xpathexpr
        return <tr><td>{fn:format-dateTime(xdmp:parse-dateTime("[Y0001]-[M01]-[D01]T[h01]:[m01]:[s01].[f1][Z]", $memo/*:recordedAt/text()),
                         "[Y01]/[M01]/[D01] [H01]:[m01]:[s01]:[f01]")}</td><td>{$memo/*:transcriptionText/text()}</td></tr>
        }
        </table>
        </body> 
        </html>
    }
    ;

We can now pass different ``XPath`` expressions to it. To return all memo's that have a transcription available, try this::

    let $xpathexpr := //*:voicememo[*:transcriptionStatus = "completed"]
    return local:get_memos($xpathexpr)

To find all memo's with specific word in them::

    let $xpathexpr := //*:voicememo[contains(*:transcriptionText, "macy")]
    return local:get_memos($xpathexpr)

VoiceMemo structure
~~~~~~~~~~~~~~~~~~~

The structure of an XML document representing a voice memo is as follows::

    <voicememo>
        <recordedAt>2010-12-16T21:33:54.6173-05:00</recordedAt>
        <recordedVoiceDocURI>/voicememo/recording/CA21bc69b2af50e38b40d0bb93d43a8e04.xml</recordedVoiceDocURI>
        <recordedDuration>seconds</recordedDuration>
        <transcriptionStatus>status</transcriptionStatus>
        <transcriptionText>text</transcriptionText>
    </voicememo>

Adding VoiceMemo's to MarkLogic Server
--------------------------------------

There are two distinct operations to perform while adding voice memo's.

* First, the voice memo needs to be inserted with partial information using ``xdmp:document-insert()`` function. The document also includes a ``transcriptionStatus`` with a value of ``"unavailable"``, which will be replaced
  once the transcription is available.
* Second, the same memo needs to be updated when more information (viz., transcription) is available. The call back from Twilio with this information typically happens after a few seconds to minutes of the completion of the
  call. This process involves reconstructing the document URI and retrieving the document to do the following:

    - replace the ``transcriptionStatus`` node with the value of ``"TranscriptionStatus"`` parameter from the request using ``xdmp:node-replace()``.
    - insert the ``transcriptionText`` node with the value of ``"TranscriptionText"`` parameter from the request using ``xdmp:node-insert-child()``.

Building REST services
----------------------

The Note Taker is a REST based webservice that provides API's for Twilio to call into for actions and callbacks. There are several approaches to building such a service, and for the current purpose, we use MarkLogic's
ability to act as an application server and build an application using the XQuery files. However the application is **NOT** a web application, so it is not going to serve HTML pages, but rather XML, more particularly TwiML.

There are 3 URI's that are exposed by the WebService and they are:

* /voicememo/startmemo.xqy - Gets the conversation started. This is also the ``"Voice URL"`` for Twilio.
* /voicememo/recordedmemo.xqy - Creates the memo with voice recording information.
* /voicememo/transcribedmemo.xqy - Updates the memo with transcribed message.

Each of these resources are served by distinct XQuery files.

Code snippets
=============

Say Hello with Twilio
---------------------

Here is a simple XQuery file that serves TwiML. Save this as an ``.xqy`` file and set the URL as ``"Voice URL"`` for Twilio. Make sure that the security is disabled [2]_ such that Twilio can access the URL without requiring
any credentials::

    xquery version "1.0-ml";

    let $callerCity := xdmp:get-request-field("CallerCity", "Unknown City")

    return <Response><Say>Hello caller, from {$callerCity}. We wish you a Merry Christmas. Goodbye.</Say></Response>

Retrieve binary data from URL and insert as document
----------------------------------------------------

This code snippet shows how to retrieve a URL containing binary data (such as the Twilio voice recording) and insert it as a binary document. This code can be executed as it is in CQ[1]_::

    xquery version "1.0-ml";
    declare namespace foo = "xdmp:http";

    (: A magnificent ant macro picture by gbohne from: http://www.flickr.com/photos/gbohne/5052878709/ :)
    let $response := xdmp:http-get("http://farm5.static.flickr.com/4152/5052878709_44b4bc6430_o_d.jpg")
    return xdmp:document-insert('/image/image1.xml', $response[2]/node(), (), '/image')
    
Retrieve a binary document from MarkLogic server
------------------------------------------------

This code snippet shows how to retrieve the above document back. This code can be executed as it is in CQ [1]_. When executed, the browser would prompt you to save the file, name the file appropriately (say, image.jpg) and
verify it by opening the file.::

    xquery version "1.0-ml";

    doc('/image/image1.xml')/node()

Assumptions
===========

* A basic assumption that simplifies the logic a bit is that, when recording ends, Twilio's action always takes place ahead of callback for transcription. In practice this might be the actual documented behavior, but even
  otherwise, probably safe enough to assume.

References
==========
* http://developer.marklogic.com/learn/2009-01-get-started-apps
* http://blogs.avalonconsult.com/blog/generic/installing-marklogic-on-an-ec2-micro-instance-free-for-1-year/
* http://www.w3schools.com/xpath/default.asp
* http://xqzone.marklogic.com/pubs/4.2/apidocs/All.html
* http://docs.marklogic.com/4.2doc/docapp.xqy
* http://www.twilio.com/docs/
* http://www.twilio.com/docs/api/2010-04-01/twiml/twilio_request
* http://developer.marklogic.com/learn/2004-09-dates

.. [1] MarkLogic CQ is a web-based XQuery tool, available from http://developer.marklogic.com/code/cq
.. [2] To disable security, see the information posted here: http://markmail.org/thread/6ntgnwrjlrusq2ot
