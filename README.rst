============================================
VoiceMemo Application using MarkLogic Server
============================================
:Author: Hari Krishna Dara
:Date: 15-Dec-2010


Objective
=========
Create a service that allows us to create memos by simply calling a phone number and dictating the memo. The service should transcribe the memo and store it with enough metadata to be useful to search and retrieve
using a web interface. The service should be built on top of MarkLogic Server using Twilio as the voice gateway.

Implementation
==============
There are two main parts to the system:

1. Note taker webservice that has two components

    * Voice-memo webservice, that receives actions and callbacks from Twilio

    * The Twilio voice gateway frontend that is in turn driven by ``TwiML`` generated by Voice-memo webservice

#. A MarkLogic application that allows us to browse, search and manage the stored memo's.

Note taker webservice
---------------------

The webservice provides several REST API calls for Twilio's server to use. When a user calls a pre-assigned phone number, the call is answered by Twilio and with the help of ``TwiML`` generated by callbacks to our webservice,
the user is guided through the recording process. Twilio calls our webservice first when the recording is available, and later when the transcription is ready. The webservice uses MarkLogic server to create and update memo
as Twilio makes that information available to the service. Here is a visualization of the entire process:

.. image:: http://i1222.photobucket.com/albums/dd499/haridsv/scheme.png


1. User initiates call
~~~~~~~~~~~~~~~~~~~~~~

User first calls a predetermined phone number. The call is answered by Twilio and triggers the rest of the process.

2. Twilio sends SID to Note Taker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After the process is initiated, one of the first things Twilio does is to send a request to the "Voice URL", which is set to a predetermined URL of the Note Taker. The URL looks like this: ``http://host:port/startmemo``.

3. Instruct user to start recording
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The response back to Twilio is a ``TwiML`` document that guides the user through recording process. Here is how the XML looks like::

    <Response>
        <Say>Hello. Please start recording your memo after the beep. Press # key when done.</Say>
        <Record transcribe="true" transcribeCallback="transcribedmemo"
            action="voicememo" maxLength="30" finishOnKey="#"/>
    </Response>

4. Instruct user to speak
~~~~~~~~~~~~~~~~~~~~~~~~

Twilio plays the message that is part of the "Say" element. When user presses the "#" key or exceeds the 30 second length, the recording ends.

5. Recording ends
~~~~~~~~~~~~~~~~~

When recording ends, Twilio sends a request to the ``http://host:port/voicememo`` URL that includes the ``RecordingUrl`` and ``RecordingDuration`` parameters. The RecordingUrl can be used to download recorded audio.

6. Create memo
~~~~~~~~~~~~~~

At this point, the Note Taker webservice has the following information to add a new memo:
* Recoding of the memo
* Duration of the recording
* Timestamp (approximate)

The voice recording is retrieved from the ``RecordingUrl`` and included into the document as ``Base64`` encoded text. While inserting the memo as a new XML document in MarkLogic, the following information is used:
* The URI of the document is set to: ``/voicememo/<CallSid>.html``
* The Category of the document is set to: ``/voicememo/<From>``

7. Say, Good bye! to user
~~~~~~~~~~~~~~~~~~~~~~~~~

After the new memo has been inserted into the system, a ``TwiML`` document is returned that terminates the call gracefully. Here is how the XML looks like::

    <Response>
        <Say>Your memo has been recorded.</Say>
        <Say>Goodbye.</Say>
    </Response>

8. Call ends
~~~~~~~~~~~~

Twilio plays the message that the memo has been recorded and disconnects the call after saying goodbye.

9. Transcription is available
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When Twilio completes the transcription of the voice message, an asynchronous request is made to the URL http://host:port/transcribedmemo with the parameters ``TranscriptionStatus`` and ``TranscriptionText``.

10. Update Memo with transcription information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If ``TranscriptionStatus`` is ``"Completed"``, the ``TranscriptionText`` is then added to the memo that is already created. The unique ``CallSid`` is used to identify the correct XML document that needs to be updated. The ``TranscriptionStatus`` is added to the document anyway, with an empty ``TranscriptionText`` as it is useful to know why a transcription is missing, if at all a message fails to transcribe.

MarkLogic Application
---------------------

<TBD>

VoiceMemo structure
-------------------

The structure of an XML document representing a voice memo is as follows::

    <VoiceMemo>
        <RecordedAt>Thu, 16 Dec 2010 16:44:56 -0800</RecordedAt>
        <RecordedVoiceData><![CDATA[base64]]></RecordedVoiceData>
        <RecordedDuration>seconds</RecordedDuration>
        <TranscriptionText>text</TranscriptionText>
        <TranscriptionStatus>status</TranscriptionStatus>
    </VoiceMemo>

External Dependencies
=====================
- RESTlet
- log4j
- xstream
- httpclient ?
